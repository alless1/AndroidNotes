IPC通信耗费资源和性能,对应的使用场景
AIDL 		(多进程并发)	多进程 多线程
Binder 		(非多进程并发)	单进程 多线程 
Messenger 	(多进程非并发)	多进程 单线程 底层封装的AIDL,功能受限,只能传递消息,不能调用服务.

android studio 在根目录下建一个aidl文件夹,和java文件夹并列的.
序列化打包的数据顺序一致
AIDL中只支持方法,不支持声明静态常量.


(重点！)
官方文档翻译:
 a.只有当你需要来自不同应用的客户端通过IPC（进程间通信）通信来访问你的服务时，并且想在服务里处理多线程的业务，这时就需要使用AIDL。

b.如果你不需要同时对几个应用进程IPC操作，你最好通过实现Binder接口来创建你的接口。

c.如果你仍需要执行IPC操作，但不需要处理多线程，使用Messenger来实现接口即可。

d.无论如何，在实现AIDL之前确保你完全理解Bound Service相关知识。


总结下，它的们共同点和差异的地方：

1.他们都与IPC（远程）调用有关。

2.本质不同，Binder是一个对象，继承了IBinder对象，你可以借助它来自定义RPC（远程过程调用协议）协议。AIDL是Android提供的接口定义语言，借助这个工具，你可以很轻松地实现IPC通信机制，根据需要灵活定义接口，

3.作用范围不同。如果是在一个应用里实现远程调用，使用Binder即可，没必要使用AIDL。如果涉及到在多个应用程序之间使用IPC通信，并且在服务又有多线程业务处理，这时可以使用AIDL。

Messenger使用：
服务端和客户端各自通过Handler初始化Messenger。
通过绑定服务交换各自的Messenger。
通过Messenger实现进程通讯。

进程间通讯的接口定义是IBinder。
本地和远程区别，本地通过绑定服务就能获取IBinder对象，远程的话需要遵守AIDL规则，才能获取到IBinder对象。